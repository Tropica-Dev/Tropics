plugins {
	id("java")
	id("idea")
	id("fabric-loom") version("${fabric_loom_version}")
	id("me.modmuss50.mod-publish-plugin") version("${publisher_plugin_version}")
	id("maven-publish")
}

base {
	archivesName = "${mod_name}-v${minecraft_version}-${mod_version}"
}

repositories {
	maven {
		name = "Curse Maven"
		url = "https://cursemaven.com"

		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = "ParchmentMC"
		url = "https://maven.parchmentmc.org"
	}

	maven {
		name = "GeckoLib Maven"
		url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
		content {
			includeGroupByRegex("software\\.bernie.*")
			includeGroup("com.eliotlash.mclib")
		}
	}

	maven {
		name = "Jared Maven"
		url = "https://maven.blamejared.com/"
	}
	maven {
		name = "RyanLiptak Maven"
		url = "https://maven.ryanliptak.com/"
	}
	maven {
		name = "TerraformersMC Maven"
		url = "https://maven.terraformersmc.com/"
	}
}

dependencies {
	// Base
	minecraft("com.mojang:minecraft:${minecraft_version}")
	mappings(loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:${mappings_channel}-${mappings_channel_version}@zip")
	})

	modImplementation("net.fabricmc:fabric-loader:${loader_version}")

	// Dependencies (Mandatory)
	modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

	modImplementation("software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}")
	implementation("com.eliotlash.mclib:mclib:${mclib_version}")

	// Dependencies (Optional)
	modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
	modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")

	modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

	modCompileOnly("squeek.appleskin:appleskin-fabric:${appleskin_version}:api") { transitive = false }

	modImplementation("com.terraformersmc:modmenu:${modmenu_version}")
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

loom {
	splitEnvironmentSourceSets()

	accessWidenerPath = file("src/main/resources/${mod_id}.accesswidener")

	mixin { defaultRefmapName.set("${mod_id}.refmap.json") }

	mods {
		mod_id {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	runs {
		client {
			client()
			setConfigName("${fabric_client_taskname}")
			ideConfigGenerated(true)
			runDir("run")
		}
		server {
			server()
			serverWithGui()
			setConfigName("${fabric_server_taskname}")
			ideConfigGenerated(true)
			runDir("run")
		}
		datagen {
			inherit server
			setConfigName("${fabric_data_taskname}")

			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${mod_id}"

			runDir "build/datagen"
		}
	}
}

processResources {
	var replaceProperties = [
			// Base
			mod_id: mod_id,
			mod_name: mod_name,
			mod_license: mod_license,
			mod_version: mod_version,
			mod_authosr: mod_authors,
			mod_description: mod_description,
			mod_sources: mod_sources,
			mod_homepage: mod_homepage,

			mod_entrypoint: mod_entrypoint,
			mod_client_entrypoint: mod_client_entrypoint,
			mod_datagen_entrypoint: mod_datagen_entrypoint,
			mod_icon_path: mod_icon_path,

			minecraft_version: minecraft_version,
			minecraft_version_range: minecraft_version_range,

			// Dependencies (Mandatory)
			loader_version_range: loader_version_range,
			fabric_api_version_range: fabric_api_version_range,

			geckolib_version_range: geckolib_version_range,

			// Dependencies (Optional)
			jei_version_range: jei_version_range,
			modmenu_version_range: modmenu_version_range,
			appleskin_version_range: appleskin_version_range
	]

	inputs.property "version", mod_version

	filesMatching("fabric.mod.json") {
		expand replaceProperties += [project: project]
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = base.archivesName.get()
			version = mod_version

			from components.java
		}
	}
}

publishMods {
	file = jar.archiveFile
	changelog = file("CHANGELOG.md").getText()
	version = "${minecraft_version}-${mod_version}"
	displayName = "${mod_name} v${minecraft_version}-${mod_version}"
	type = STABLE

	modLoaders.add("fabric")

	curseforge {
		projectId = ""
		projectSlug = "tropics"
		accessToken = providers.environmentVariable("CURSEFORGE_API_KEY") // If you're a contributor/have perms to upload to the project via the apps, then you should be able to use your own key
		announcementTitle = "New Tropics CurseForge Release"

		getMinecraftVersions().add(minecraft_version)
	}

	modrinth {
		projectId = ""
		accessToken = providers.environmentVariable("MODRINTH_API_KEY")
		announcementTitle = "New Tropics Modrinth Release"

		getMinecraftVersions().add(minecraft_version)
	}
}